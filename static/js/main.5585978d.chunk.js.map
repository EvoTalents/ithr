{"version":3,"sources":["store/candidates/candidatesReducer.ts","services/fetchCandidates.ts","components/CandidatesProvider/CandidatesProvider.tsx","store/candidates/cities.ts","components/Cities/Cities.tsx","store/candidates/techStack.ts","components/TechStack/TechStack.tsx","components/CandidatesList/CandidatesList.tsx","components/Filters/FilterSelect.tsx","components/Filters/FilterCity.tsx","components/Filters/FilterTechStack.tsx","components/Filters/Filters.tsx","components/Pagination/Pagination.tsx","components/Candidates/Candidates.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Filters/Filters.module.css","components/Pagination/Pagination.module.css"],"names":["populateFromQS","state","qs","replace","newState","filters","queryParams","split","reduce","acc","pairStr","key","value","decodeURIComponent","Number","skip","limit","techStack","cities","defaultStore","candidates","totalCount","candidatesReducer","action","type","payload","Math","min","max","candidateMapper","_id","summary","salary","cv","linkedIn","english","currentPosition","desiredPosition","contacts","id","name","years","useCandidatesProvider","history","useRef","createBrowserHistory","current","useReducer","URL","window","location","href","search","dispatch","useEffect","unlisten","listen","push","url","searchParams","set","toString","delete","length","join","serializeQS","canceled","append","fetch","then","response","ok","Error","json","items","map","fetchCandidates","console","log","setCities","setTechStack","nextPage","prevPage","CandidatesContext","React","useCandidates","useContext","CandidatesProvider","children","Provider","citiesOptions","label","citiesMap","city","Cities","c","techStackOptions","techStackMap","ts","TechStack","CandidatesList","className","candidate","title","slice","target","rel","FilterSelect","options","onChange","placeholder","isMulti","filter","t","includes","data","FilterCity","useCities","FilterTechStack","useTechStack","Filters","styles","Filter","PageButton","onClick","classNames","pageButton","Pagination","usePagination","hasPrevPage","hasNextPage","Candidates","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.5585978d.chunk.js","sourcesContent":["import { Reducer } from \"react\";\nimport { CityValue } from \"./cities\";\nimport { TechStackValue } from \"./techStack\";\n\nexport interface CandidateRaw {\n  years?: number;\n  name: string | null;\n  _id: string;\n  _owner: string;\n  _createdDate: {\n    $date: string;\n  };\n  _updatedDate: {\n    $date: string;\n  };\n  english?: string;\n  contacts?: string | null;\n  cv?: string | null;\n  salary?: string;\n  currentPosition?: string;\n  canShow: boolean;\n  desiredPosition?: string;\n  techStack?: TechStackValue[] | string;\n  summary?: string;\n  linkedIn?: string | null;\n  cities?: CityValue[] | string;\n  index: number;\n}\n\nexport interface Candidate {\n  id: string;\n  name: string | null;\n  years?: number;\n  english?: string;\n  contacts?: string | null;\n  cv?: string | null;\n  salary?: string;\n  currentPosition?: string;\n  desiredPosition?: string;\n  techStack: TechStackValue[];\n  summary?: string;\n  linkedIn?: string | null;\n  cities: CityValue[];\n}\n\nexport interface Filters {\n  cities: CityValue[];\n  techStack: TechStackValue[];\n}\n\nexport interface Store {\n  candidates: Candidate[];\n  filters: Filters;\n  totalCount: number;\n  skip: number;\n  limit: number;\n}\n\nexport const DEFAULT_LIMIT = 50;\n\nexport const populateFromQS = (state: Store, qs: string): Store => {\n  qs = qs.replace(/^\\?/, \"\");\n  if (!qs) {\n    return state;\n  }\n  const newState: Store = {\n    ...state,\n    filters: {\n      ...state.filters,\n    },\n  };\n  const queryParams: { [key: string]: string } = qs\n    .split(\"&\")\n    .reduce((acc, pairStr) => {\n      const [key, value] = pairStr.split(\"=\");\n      return { ...acc, [key]: decodeURIComponent(value) };\n    }, {});\n  if (Number(queryParams.skip)) {\n    newState.skip = Number(queryParams.skip);\n  }\n  if (Number(queryParams.limit)) {\n    newState.limit = Number(queryParams.limit);\n  }\n  if (queryParams.techStack) {\n    newState.filters.techStack = queryParams.techStack.split(\n      \",\"\n    ) as TechStackValue[];\n  }\n  if (queryParams.cities) {\n    newState.filters.cities = queryParams.cities.split(\",\") as CityValue[];\n  }\n  return newState;\n};\n\nexport const defaultStore: Store = {\n  candidates: [],\n  skip: 0,\n  limit: DEFAULT_LIMIT,\n  totalCount: 0,\n  filters: {\n    cities: [],\n    techStack: [],\n  },\n};\n\ninterface SetCandidatesAction {\n  type: \"setCandidates\";\n  payload: { candidates: Candidate[]; totalCount: number };\n}\n\ninterface NextPageAction {\n  type: \"nextPage\";\n}\n\ninterface PrevPageAction {\n  type: \"prevPage\";\n}\n\ninterface FilterCitiesAction {\n  type: \"filterCities\";\n  payload: CityValue[];\n}\n\ninterface FilterTechStackAction {\n  type: \"filterTechStack\";\n  payload: TechStackValue[];\n}\n\ninterface PopulateFromQSAction {\n  type: \"populateFromQS\";\n  payload: string;\n}\n\nexport type Action =\n  | SetCandidatesAction\n  | NextPageAction\n  | PrevPageAction\n  | FilterCitiesAction\n  | FilterTechStackAction\n  | PopulateFromQSAction;\n\nexport const candidatesReducer: Reducer<Store, Action> = (state, action) => {\n  switch (action.type) {\n    case \"setCandidates\": {\n      return {\n        ...state,\n        candidates: action.payload.candidates,\n        totalCount: action.payload.totalCount,\n      };\n    }\n    case \"nextPage\": {\n      return {\n        ...state,\n        skip: Math.min(state.skip + state.limit, state.totalCount),\n      };\n    }\n    case \"prevPage\": {\n      return {\n        ...state,\n        skip: Math.max(state.skip - state.limit, 0),\n      };\n    }\n    case \"filterCities\": {\n      return {\n        ...state,\n        skip: 0,\n        filters: {\n          ...state.filters,\n          cities: action.payload,\n        },\n      };\n    }\n    case \"filterTechStack\": {\n      return {\n        ...state,\n        skip: 0,\n        filters: {\n          ...state.filters,\n          techStack: action.payload,\n        },\n      };\n    }\n    case \"populateFromQS\": {\n      return populateFromQS(state, action.payload);\n    }\n    default:\n      return state;\n  }\n};\n","import {Candidate, CandidateRaw, DEFAULT_LIMIT} from '../store/candidates/candidatesReducer';\nimport { CityValue } from \"../store/candidates/cities\";\nimport { TechStackValue } from \"../store/candidates/techStack\";\n\ninterface CandidatesResponseBase<T> {\n  items: T[];\n  totalCount: number;\n  skip: number;\n  limit: number;\n}\n\ninterface CandidatesResponse extends CandidatesResponseBase<Candidate> {}\n\ninterface CandidateResponseRaw extends CandidatesResponseBase<CandidateRaw> {\n  items: CandidateRaw[];\n}\n\nconst candidateMapper = ({\n  _id,\n  techStack,\n  cities,\n  summary,\n  salary,\n  cv,\n  linkedIn,\n  english,\n  currentPosition,\n  desiredPosition,\n  contacts,\n  name,\n  years,\n}: CandidateRaw): Candidate => ({\n  id: _id,\n  name,\n  summary,\n  salary,\n  linkedIn,\n  currentPosition,\n  desiredPosition,\n  cities: (typeof cities === \"string\" ? [cities] : cities || []) as CityValue[],\n  techStack: (typeof techStack === \"string\"\n    ? [techStack]\n    : techStack || []) as TechStackValue[],\n  contacts,\n  cv,\n  english,\n  years,\n});\nconst BASE_URL = \"https://hr0153.wixsite.com/ithr/_functions/candidates\";\nconst BASE_DEV_URL =\n  \"https://hr0153.wixsite.com/ithr/_functions-dev/candidates\";\n\ninterface FetchCandidatesOptions {\n  skip?: number;\n  limit?: number;\n  filters?: {\n    cities?: CityValue[];\n    techStack?: string[];\n  };\n}\n\nexport const fetchCandidates = ({\n  skip = 0,\n  limit = DEFAULT_LIMIT,\n  filters: { cities = [], techStack = [] } = { cities: [], techStack: [] },\n}: FetchCandidatesOptions): Promise<CandidatesResponse> => {\n  // const url = new URL(BASE_URL);\n  const url = new URL(BASE_DEV_URL);\n\n  if (skip) {\n    url.searchParams.append(\"skip\", skip.toString());\n  }\n  if (limit && limit !== DEFAULT_LIMIT) {\n    url.searchParams.append(\"limit\", limit.toString());\n  }\n  if (cities && cities.length) {\n    url.searchParams.append(\"cities\", cities.join(\",\"));\n  }\n  if (techStack && techStack.length) {\n    url.searchParams.append(\"techStack\", techStack.join(\",\"));\n  }\n  return fetch(url.href)\n    .then((response) => {\n      if (!response.ok) {\n        throw Error(\"could not fetch candidates\");\n      }\n      return response;\n    })\n    .then((response) => response.json())\n    .then(\n      ({\n        items,\n        limit,\n        skip,\n        totalCount,\n      }: CandidateResponseRaw): CandidatesResponse => ({\n        items: items.map(candidateMapper),\n        limit,\n        totalCount,\n        skip,\n      })\n    );\n};\n","import { createBrowserHistory } from \"history\";\nimport * as React from \"react\";\nimport { Reducer, useContext, useEffect, useReducer, useRef } from \"react\";\nimport { fetchCandidates } from \"../../services/fetchCandidates\";\nimport {\n  Action,\n  Candidate,\n  candidatesReducer,\n  DEFAULT_LIMIT,\n  defaultStore,\n  populateFromQS,\n  Store,\n} from \"../../store/candidates/candidatesReducer\";\nimport { CityValue } from \"../../store/candidates/cities\";\nimport { TechStackValue } from \"../../store/candidates/techStack\";\n\ninterface Props {\n  children: React.ReactNode;\n}\n\ninterface QueryParams {\n  skip?: number;\n  limit?: number;\n  cities?: CityValue[];\n  techStack?: TechStackValue[];\n}\n\nconst serializeQS = ({ skip, limit, cities, techStack }: QueryParams) => {\n  const url = new URL(window.location.href);\n  if (skip) {\n    url.searchParams.set(\"skip\", skip.toString());\n  } else {\n    url.searchParams.delete(\"skip\");\n  }\n  if (limit && limit !== DEFAULT_LIMIT) {\n    url.searchParams.set(\"limit\", limit.toString());\n  } else {\n    url.searchParams.delete(\"limit\");\n  }\n  if (cities && cities.length) {\n    url.searchParams.set(\"cities\", cities.join(\",\"));\n  } else {\n    url.searchParams.delete(\"cities\");\n  }\n  if (techStack && techStack.length) {\n    url.searchParams.set(\"techStack\", techStack.join(\",\"));\n  } else {\n    url.searchParams.delete(\"techStack\");\n  }\n  return url.search;\n};\n\nconst useCandidatesProvider = (): ICandidatesContext => {\n  const historyRef = useRef(createBrowserHistory());\n  const history = historyRef.current;\n\n  const [\n    { candidates, filters, skip, limit, totalCount },\n    dispatch,\n  ] = useReducer<Reducer<Store, Action>>(\n    candidatesReducer,\n    populateFromQS(defaultStore, new URL(window.location.href).search)\n  );\n  const { cities, techStack } = filters;\n  useEffect(() => {\n    const unlisten = history.listen((location, action) => {\n      if (action === \"POP\") {\n        dispatch({ type: \"populateFromQS\", payload: location.search });\n      }\n    });\n    return () => unlisten();\n  });\n  useEffect(() => {\n    history.push(serializeQS({ skip, limit, cities, techStack }));\n  }, [skip, limit, cities, techStack]);\n  useEffect(() => {\n    let canceled = false;\n    fetchCandidates({ skip, filters: { cities, techStack } }).then(\n      (response) => {\n        if (canceled) {\n          return;\n        }\n        console.log(response);\n        dispatch({\n          type: \"setCandidates\",\n          payload: {\n            candidates: response.items,\n            totalCount: response.totalCount,\n          },\n        });\n      }\n    );\n    return () => {\n      canceled = true;\n    };\n  }, [skip, cities, techStack]);\n  return {\n    candidates,\n    skip,\n    totalCount,\n    limit,\n    cities: filters.cities,\n    techStack: filters.techStack,\n    setCities: (cities) => {\n      dispatch({ type: \"filterCities\", payload: cities });\n    },\n    setTechStack: (techStack) => {\n      dispatch({ type: \"filterTechStack\", payload: techStack });\n    },\n\n    nextPage: () => {\n      dispatch({ type: \"nextPage\" });\n    },\n    prevPage: () => {\n      dispatch({ type: \"prevPage\" });\n    },\n  };\n};\n\ninterface ICandidatesContext {\n  candidates: Candidate[];\n  skip: number;\n  totalCount: number;\n  limit: number;\n  cities: CityValue[];\n  techStack: TechStackValue[];\n  setCities: (cities: CityValue[]) => void;\n  setTechStack: (techStack: TechStackValue[]) => void;\n  nextPage: () => void;\n  prevPage: () => void;\n}\n\nconst CandidatesContext = React.createContext<ICandidatesContext>({\n  candidates: [],\n  skip: 0,\n  limit: DEFAULT_LIMIT,\n  totalCount: 0,\n  cities: [],\n  techStack: [],\n  setCities() {},\n  setTechStack() {},\n  nextPage() {},\n  prevPage() {},\n});\n\nexport const useCandidates = () => useContext(CandidatesContext);\n\nexport const CandidatesProvider: React.FunctionComponent<Props> = ({\n  children,\n}) => {\n  const value = useCandidatesProvider();\n\n  return (\n    <CandidatesContext.Provider value={value}>\n      {value.candidates.length ? children : <div>Loading...</div>}\n    </CandidatesContext.Provider>\n  );\n};\n","export type CityValue = 'dnipro' | 'kyiv' | 'kharkiv' | 'lviv' | 'odessa' | 'remote' | 'other';\n\nexport interface City {\n  value: CityValue;\n  label: string;\n}\n\nexport const citiesOptions: City[] = [\n  { value: \"dnipro\", label: \"Днепр\" },\n  { value: \"kyiv\", label: \"Киев\" },\n  { value: \"kharkiv\", label: \"Харьков\" },\n  { value: \"lviv\", label: \"Львов\" },\n  { value: \"odessa\", label: \"Одесса\" },\n  { value: \"remote\", label: \"Remote\" },\n  { value: \"other\", label: \"Other\" },\n];\n","import React from \"react\";\nimport { citiesOptions, CityValue } from \"../../store/candidates/cities\";\n\ntype CitiesMap = { [key in CityValue]?: string };\n\nconst citiesMap: CitiesMap = citiesOptions.reduce(\n  (acc, city) => ({\n    ...acc,\n    [city.value]: city.label,\n  }),\n  {}\n);\n\nexport const Cities: React.FC<{ cities: CityValue[] }> = ({ cities }) => {\n  return <div>{cities.map((c) => citiesMap[c] || c).join(\", \")}</div>;\n};\n","export type TechStackValue =\n  | \"java\"\n  | \"javascript\"\n  | \"c#\"\n  | \"php\"\n  | \"python\"\n  | \"c++\"\n  | \"typescript\"\n  | \"swift\"\n  | \"ruby\"\n  | \"kotlin\"\n  | \"scala\"\n  | \"go\"\n  | \"business-analyst\"\n  | \"data-science\"\n  | \"design-ux\"\n  | \"gamedev-unity-as3\"\n  | \"product-manager\"\n  | \"project-manager\"\n  | \"qa-manual\"\n  | \"qa-automation\"\n  | \"sql-dba\"\n  | \"sysadmin-devops\"\n  | \"marketing\"\n  | \"recruiting-hr\"\n  | \"sales\"\n  | \"support\"\n  | \"other\"\n  | \"ios\"\n  | \"android\"\n  | \"management\";\n\ninterface TechStack {\n  value: TechStackValue;\n  label: string;\n}\n\nexport const techStackOptions: TechStack[] = [\n  {\n    label: \"Java\",\n    value: \"java\",\n  },\n  {\n    label: \"JavaScript\",\n    value: \"javascript\",\n  },\n  {\n    label: \"C#\",\n    value: \"c#\",\n  },\n  {\n    label: \"PHP\",\n    value: \"php\",\n  },\n  {\n    label: \"Python\",\n    value: \"python\",\n  },\n  {\n    label: \"C++\",\n    value: \"c++\",\n  },\n  {\n    label: \"TypeScript\",\n    value: \"typescript\",\n  },\n  {\n    label: \"Swift\",\n    value: \"swift\",\n  },\n  {\n    label: \"Ruby\",\n    value: \"ruby\",\n  },\n  {\n    label: \"Kotlin\",\n    value: \"kotlin\",\n  },\n  {\n    label: \"Scala\",\n    value: \"scala\",\n  },\n  {\n    label: \"Go\",\n    value: \"go\",\n  },\n  {\n    label: \"Business Analyst\",\n    value: \"business-analyst\",\n  },\n  {\n    label: \"Data Science\",\n    value: \"data-science\",\n  },\n  {\n    label: \"Design / UX\",\n    value: \"design-ux\",\n  },\n  {\n    label: \"GameDev / Unity / AS3\",\n    value: \"gamedev-unity-as3\",\n  },\n  {\n    label: \"Product Manager\",\n    value: \"product-manager\",\n  },\n  {\n    label: \"Project Manager\",\n    value: \"project-manager\",\n  },\n  {\n    label: \"QA Manual\",\n    value: \"qa-manual\",\n  },\n  {\n    label: \"QA Automation\",\n    value: \"qa-automation\",\n  },\n  {\n    label: \"SQL (DBA)\",\n    value: \"sql-dba\",\n  },\n  {\n    label: \"SysAdmin / DevOps\",\n    value: \"sysadmin-devops\",\n  },\n  {\n    label: \"Marketing\",\n    value: \"marketing\",\n  },\n  {\n    label: \"Recruiting / HR\",\n    value: \"recruiting-hr\",\n  },\n  {\n    label: \"Sales\",\n    value: \"sales\",\n  },\n  {\n    label: \"Support\",\n    value: \"support\",\n  },\n  {\n    label: \"Other\",\n    value: \"other\",\n  },\n  {\n    label: \"iOS\",\n    value: \"ios\",\n  },\n  {\n    label: \"Android\",\n    value: \"android\",\n  },\n  {\n    label: \"Management\",\n    value: \"management\",\n  },\n];\n","import * as React from \"react\";\nimport {\n  techStackOptions,\n  TechStackValue,\n} from \"../../store/candidates/techStack\";\n\ntype TechStackMap = { [key in TechStackValue]?: string };\n\nconst techStackMap: TechStackMap = techStackOptions.reduce(\n  (acc, ts) => ({\n    ...acc,\n    [ts.value]: ts.label,\n  }),\n  {}\n);\n\ninterface Props {\n  techStack: TechStackValue[];\n}\n\nexport const TechStack: React.FunctionComponent<Props> = ({ techStack }) => (\n  <div>{techStack.map((ts) => techStackMap[ts] || ts).join(\", \")}</div>\n);\n","import * as React from \"react\";\nimport { useCandidates } from \"../CandidatesProvider/CandidatesProvider\";\nimport { Cities } from \"../Cities/Cities\";\nimport { TechStack } from \"../TechStack/TechStack\";\n\nexport const CandidatesList: React.FC = () => {\n  const { candidates } = useCandidates();\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Имя</th>\n          <th>Текущая позиция</th>\n          <th>Желаемая позиция</th>\n          <th>О себе</th>\n          <th>English</th>\n          <th>Контакты</th>\n          <th>LinkedIn</th>\n          <th>Резюме</th>\n          <th>ЗП ожидания</th>\n          <th>Тех стек</th>\n          <th>Город</th>\n        </tr>\n      </thead>\n      <tbody>\n        {candidates.map((candidate) => (\n          <tr key={candidate.id}>\n            <td title={candidate.id}>{candidate.id.slice(0, 8)}</td>\n            <td>{candidate.name || <i>По запросу</i>}</td>\n            <td>{candidate.currentPosition}</td>\n            <td>{candidate.desiredPosition}</td>\n            <td>{candidate.summary}</td>\n            <td>{candidate.english}</td>\n            <td>{candidate.contacts}</td>\n            <td>\n              {candidate.linkedIn ? (\n                <a\n                  href={candidate.linkedIn}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  linkedin\n                </a>\n              ) : null}\n            </td>\n            <td>\n              {candidate.cv ? (\n                <a\n                  href={candidate.cv}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  CV\n                </a>\n              ) : null}\n            </td>\n            <td>{candidate.salary}</td>\n            <td>\n              <TechStack techStack={candidate.techStack} />\n            </td>\n            <td>\n              <Cities cities={candidate.cities} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import * as React from \"react\";\nimport Select from \"react-select\";\n\ntype Option<T> = { label: string; value: T };\n\ninterface Props<Value extends string> {\n  options: Option<Value>[];\n  value: Value[];\n  onChange: (data: Value[]) => void;\n  placeholder?: React.ReactNode;\n}\n\nexport const FilterSelect = <T extends string>({\n  options,\n  value,\n  onChange,\n  placeholder,\n}: Props<T>) => (\n  <Select<Option<T>>\n    options={options}\n    isMulti\n    placeholder={placeholder}\n    value={options.filter((t) => value.includes(t.value))}\n    onChange={(data) => {\n      console.log(\"data\", data);\n\n      onChange((((data || []) as any) as Option<T>[]).map((c) => c.value));\n    }}\n  />\n);\n","import * as React from \"react\";\nimport { citiesOptions, CityValue } from \"../../store/candidates/cities\";\nimport { useCandidates } from \"../CandidatesProvider/CandidatesProvider\";\nimport { FilterSelect } from \"./FilterSelect\";\n\nconst useCities = () => {\n  const { cities, setCities } = useCandidates();\n  return { cities, setCities };\n};\n\ninterface Props {\n  className?: string;\n}\n\nexport const FilterCity: React.FunctionComponent<Props> = ({ className }) => {\n  const { cities, setCities } = useCities();\n  return (\n    <div className={className}>\n      <FilterSelect<CityValue>\n        options={citiesOptions}\n        value={cities}\n        onChange={setCities}\n        placeholder=\"Город\"\n      />\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { techStackOptions } from \"../../store/candidates/techStack\";\nimport { useCandidates } from \"../CandidatesProvider/CandidatesProvider\";\nimport { FilterSelect } from \"./FilterSelect\";\n\nconst useTechStack = () => {\n  const { techStack, setTechStack } = useCandidates();\n  return { techStack, setTechStack };\n};\n\ninterface Props {\n  className?: string;\n}\n\nexport const FilterTechStack: React.FunctionComponent<Props> = ({\n  className,\n}) => {\n  const { techStack, setTechStack } = useTechStack();\n  return (\n    <div className={className}>\n      <FilterSelect\n        options={techStackOptions}\n        value={techStack}\n        onChange={setTechStack}\n        placeholder=\"Стек технологий\"\n      />\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { FilterCity } from \"./FilterCity\";\nimport styles from \"./Filters.module.css\";\nimport { FilterTechStack } from \"./FilterTechStack\";\n\nexport const Filters: React.FunctionComponent = () => (\n  <div className={styles.Filters}>\n    <FilterCity className={styles.Filter} />\n    <FilterTechStack className={styles.Filter} />\n  </div>\n);\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { useCandidates } from \"../CandidatesProvider/CandidatesProvider\";\nimport styles from \"./Pagination.module.css\";\n\nconst usePagination = () => {\n  const { nextPage, prevPage, skip, limit, totalCount } = useCandidates();\n  return { nextPage, prevPage, skip, limit, totalCount };\n};\n\nconst PageButton: React.FC<{\n  children: React.ReactNode;\n  onClick: () => void;\n}> = ({ children, onClick }) => (\n  <button onClick={onClick} className={classNames(\"button\", styles.pageButton)}>\n    {children}\n  </button>\n);\n\nexport const Pagination: React.FunctionComponent = () => {\n  const { nextPage, prevPage, skip, limit, totalCount } = usePagination();\n  const hasPrevPage = skip > 0;\n  const hasNextPage = skip + limit < totalCount;\n  return (\n    <div className={styles.Pagination}>\n      {hasPrevPage ? <PageButton onClick={prevPage}>&lt;</PageButton> : null}\n      {hasNextPage ? <PageButton onClick={nextPage}>&gt;</PageButton> : null}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { CandidatesList } from \"../CandidatesList/CandidatesList\";\nimport { CandidatesProvider } from \"../CandidatesProvider/CandidatesProvider\";\nimport { Filters } from \"../Filters/Filters\";\nimport { Pagination } from \"../Pagination/Pagination\";\n\n\nexport const Candidates: React.FC = () => (\n  <CandidatesProvider>\n    <Filters />\n    <CandidatesList />\n    <Pagination />\n  </CandidatesProvider>\n);\n","import React from \"react\";\nimport { Candidates } from \"./components/Candidates/Candidates\";\n\nconst App: React.FC = () => <Candidates />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filters\":\"Filters_Filters__C-dfK\",\"Filter\":\"Filters_Filter__WlIu2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__13PUG\",\"pageButton\":\"Pagination_pageButton__1HZI7\"};"],"sourceRoot":""}